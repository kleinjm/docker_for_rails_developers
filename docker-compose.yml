version: "3" # docker-compose version. Needs to be compatible with Docker version. See https://docs.docker.com/compose/compose-file/compose-versioning/

services: # parts of our application

  web: # a service
    build: . # where to find the Dockerfile. Relative to this compose file
    ports:
      - "3000:3000" # map the containerâ€™s port 3000 to port 3000 on our local machine
      - "4000:4000" # expose port 4000 for the selenium container
    volumes:
      - .:/usr/src/app # map the host's PWD (. dir relative to compose file) to the container's app dir. This allow two way file syncing
    env_file: # where to find environment variables
      - .env/development/database
      - .env/development/web
    environment:
      - WEBPACKER_DEV_SERVER_HOST=webpack_dev_server

  webpack_dev_server:
    build: .
    command: ./bin/webpack-dev-server # start with dev server command rather than rails server command defined in the Dockerfile CMD
    ports:
      - 3035:3035
    volumes:
      - .:/usr/src/app
    env_file:
      - .env/development/database
      - .env/development/web
    environment:
      - WEBPACKER_DEV_SERVER_HOST=0.0.0.0

  redis:
    image: redis # official image to use when not using a custom Dockerfile built image

  database:
    image: postgres
    env_file:
      - .env/development/database
    volumes: # tell compose to mount the listed volumes
      - db_data:/var/lib/postgresql/data # named volume : directory to persist in this container

  selenium_chrome:
    image: selenium/standalone-chrome-debug # debug image runs inside a VNC server. A VNC client can show the running tests and help debug issues.
    logging:
      driver: none # disable noisy logging from selenium
    ports:
      - "5900:5900" # map port to be available to the host for a VNC client (use Screen Share on MacOS)

volumes: # declare the named volumes
  db_data:
